// Theme
//
// Theme variables, functions and mixins only.
// No rule definitions in here.
//
// Styleguide 1

// Points of reassembly
@import 'include-media/dist/include-media';

$breakpoints: (
  'phone': 320px,
  'tablet': 768px,
  'mobileNav': 860px,
  'desktop': 1024px
);

// Brand Colors
$Theme-color-fiord: #445c69;
$Theme-color-heather: #bec6d3;
$Theme-color-malachite: #19d374;
$Theme-color-paleSky: #627087;
$Theme-color-pictonBlue: #2aa7f0;
$Theme-color-ripeLemon: #f8e02d;
$Theme-color-tango: #f06f2a;
$Theme-color-white: #fff;
$Theme-color-sky: #ccedf2;
$Theme-color-grey: #b9d6db;

// Color Usage
$Theme-palette-text-body-default: $Theme-color-paleSky;

// Layers
$Theme-layer-images: 5;
$Theme-layer-hideImages: $Theme-layer-images + 1;
$Theme-layer-nav: $Theme-layer-images + 2;

// Spacing
$Theme-spacing-default: 50px;
$Theme-spacing-large: 100px;
$Theme-spacing-small: 25px;
$Theme-spacing-xSmall: 10px;

// Typography
$Theme-typography-fontWeight-bold: 900;
$Theme-typography-fontWeight-medium: 500;
$Theme-typography-fontWeight-regular: 300;
$Theme-typography-sansSerif-fontFamily: "museo-sans", sans-serif;
$Theme-font-sizes: (
  mobile: (
    sansSerif: (
      base: (
        font-size: 12px,
        line-height: 1.83 // 22px / 12px
      ),
      large: (
        font-size: 18px,
        line-height: 1.55 // 28px / 18px
      )
    )
  ),
  desktop: (
    sansSerif: (
      base: (
        font-size: 16px,
        line-height: 1.625 // 26px / 16px
      ),
      large: (
        font-size: 22px,
        line-height: 1.45 // 32px / 22px
      )
    )
  )
);

// font-size and line-height styles
@mixin font-properties($size: "base", $family: "sansSerif") {
  font-size: map-get(map-get(map-get(map-get($Theme-font-sizes, "mobile"), $family), $size), 'font-size');
  line-height: map-get(map-get(map-get(map-get($Theme-font-sizes, "mobile"), $family), $size), 'line-height');

  @include media(">=tablet") {
    font-size: map-get(map-get(map-get(map-get($Theme-font-sizes, "desktop"), $family), $size), 'font-size');
    line-height: map-get(map-get(map-get(map-get($Theme-font-sizes, "desktop"), $family), $size), 'line-height');
  }
}

// Common styles for headings
@mixin headingCommonStyles {
  font-weight: $Theme-typography-fontWeight-bold;
  text-transform: uppercase;
}

// Mixins for creating diagonal backgrounds
@mixin diagonalBackgroundCommonProperties($v-pad) {
  position: absolute;
  left: 0;
  width: 100%;
  height: #{$v-pad}%;
  // FIXME TODO use padding instead of height; change width and height passed into the mixins; this way the angles behave as expected; althought the content needs to force its height somehow
  // padding: #{$v-pad}% 0 0;
  // FIXME: unfortunately I don't know how to fix the empty space that sometimes (depends on the screen width) appears between the background-image and the bottom of this element
  background-position: 0 0px;
  background-repeat: no-repeat;
  background-size: 100% 100%;
  pointer-events: none;
}

@mixin diagonalBackgroundImage($w-int, $h-int, $adjoiningBackgroundColor, $position, $inverted: false) {
  $triangle: "";
  $triangle-color: 'rgb(#{red($adjoiningBackgroundColor)}, #{green($adjoiningBackgroundColor)}, #{blue($adjoiningBackgroundColor)})';
  @if ($position == "top") {
    top: 0;
    @if ($inverted == false) {
      $triangle: '<polygon points="0,0 #{$w-int},0 #{$w-int},#{$h-int}" style="fill:#{$triangle-color};"></polygon>';
    } @else {
      $triangle: '<polygon points="0,0 0,#{$h-int} #{$w-int},0" style="fill:#{$triangle-color};"></polygon>';
    }
  } @else if ($position == "bottom") {
    bottom: 0;
    @if ($inverted == false) {
      $triangle: '<polygon points="0,0 0,#{$h-int} #{$w-int},#{$h-int}" style="fill:#{$triangle-color};"></polygon>';
    } @else {
      $triangle: '<polygon points="0,#{$h-int} #{$w-int},#{$h-int} #{$w-int},0" style="fill:#{$triangle-color};"></polygon>';
    }
  }
  background-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="none" width="#{$w-int}" height="#{$h-int}" viewBox="0 0 #{$w-int} #{$h-int}" version="1.1">#{$triangle}</svg>');
}

@mixin diagonal-background($width, $height, $adjoiningBackgroundColor, $inverted: false, $position: "both") {
  $w-int: $width/1px;
  $h-int: $height/1px;
  // floors the number to 3 decimal
  $v-pad: (floor(($height / $width) * 100000) / 100000) * 100;

  position: relative;

  @if ($position == "top" or $position == "both") {
    &:before {
      @include diagonalBackgroundCommonProperties($v-pad);
      @include diagonalBackgroundImage($w-int, $h-int, $adjoiningBackgroundColor, top, $inverted);
      content: '';
    }
  }

  @if ($position == "bottom" or $position == "both") {
    &:after {
      @include diagonalBackgroundCommonProperties($v-pad);
      @include diagonalBackgroundImage($w-int, $h-int, $adjoiningBackgroundColor, bottom, $inverted);
      content: '';
      z-index: $Theme-layer-hideImages; // I'm assuming that I will only want to hide/clip the bottom part of the container
    }
  }
}
